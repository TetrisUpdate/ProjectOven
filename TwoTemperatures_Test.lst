0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   ; This version uses the LM4040 voltage reference connected to pin 6 (P1.7/AIN0)
0000              3   
                  5   $LIST
0000              7   
0000              8   ;  N76E003 pinout:
0000              9   ;                               -------
0000             10   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             11   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             12   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             13   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             14   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             15   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             16   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             18   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             19   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             20   ;                               -------
0000             21   ;
0000             22   
0000             23   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             24   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             25   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             26   TIMER0_RELOAD EQU (0x10000-(CLK/TIMER0_DENOM))
0000             27   
0000             28   SAMPLES_PER_DISPLAY equ 300 
0000             29   REFRESHES_PER_SECOND equ 45 ;Does not work properly for high number of samples/display, actual refreshes/sec is less than value given if samples/display is higher than around 255
0000             30   TIMER0_DENOM equ (SAMPLES_PER_DISPLAY*REFRESHES_PER_SECOND)
0000             31   
0000             32   ORG 0x0000
0000 02040C      33            ljmp main
0003             34   
0003             35   ;                     1234567890123456    <- This helps determine the location of the counter
0003 43757272    36   test_message:     db 'Current Temp.:', 0
     656E7420
     54656D70
     2E3A00
0012 4465672E    37   value_message:    db 'Deg. C', 0
     204300
0019             38   cseg
0019             39   ; These 'equ' must match the hardware wiring
0019             40   LCD_RS equ P1.3
0019             41   LCD_E  equ P1.4
0019             42   LCD_D4 equ P0.0
0019             43   LCD_D5 equ P0.1
0019             44   LCD_D6 equ P0.2
0019             45   LCD_D7 equ P0.3
0019             46   SSR_BOX equ P0.5
0019             47   
0019             48   
                 50   	$LIST
00CD             52   
00CD             53   ; These register definitions needed by 'math32.inc'
0030             54   DSEG at 30H
0030             55   x:   ds 4
0034             56   y:   ds 4
0038             57   bcd: ds 5
003D             58   VAL_LM4040: ds 2
003F             59   
003F             60   StoreMeasurements: ds 4
0043             61   TempStore: ds 2
0045             62   MeasurementCounter: ds 2
0047             63   SamplesPerDisplay: ds 2
0049             64   TimePerSample: ds 1
004A             65   LastMeasurement: ds 4
004E             66   StoreThermocouple: ds 4
0052             67   FinalLM335: ds 4
0056             68   
0000             69   BSEG
0000             70   mf: dbit 1
0001             71   
                546   $LIST
                 73   $LIST
033D             75   
033D             76   Init_All:
033D             77            ; Configure all the pins for biderectional I/O
033D 75AC00      78            mov     P3M1, #0x00
0340 75AD00      79            mov     P3M2, #0x00
0343 75B300      80            mov     P1M1, #0x00
0346 75B400      81            mov     P1M2, #0x00
0349 75B100      82            mov     P0M1, #0x00
034C 75B200      83            mov     P0M2, #0x00
034F             84            
034F 438E10      85            orl     CKCON, #0x10 ; CLK is the input for timer 1
0352 438780      86            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
0355 759852      87            mov     SCON, #0x52
0358 53C4DF      88            anl     T3CON, #0b11011111
035B 53890F      89            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
035E 438920      90            orl     TMOD, #0x20 ; Timer 1 Mode 2
0361 758DF7      91            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0364 D28E        92            setb TR1
0366             93            
0366             94            ; Using timer 0 for delay functions.  Initialize here:
0366 C28C        95            clr     TR0 ; Stop timer 0
0368 438E08      96            orl     CKCON,#0x08 ; CLK is the input for timer 0
036B 5389F0      97            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
036E 438901      98            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0371             99            
0371            100            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0371 43B382     101            orl     P1M1, #0b10000010
0374 53B47D     102            anl     P1M2, #0b01111101
0377            103            
0377            104            ; Initialize and start the ADC:
0377 53E8F0     105            anl ADCCON0, #0xF0
037A 43E807     106            orl ADCCON0, #0x07 ; Select channel 7
037D            107            ; AINDIDS select if some pins are analog inputs or digital I/O:
037D 75F600     108            mov AINDIDS, #0x00 ; Disable all analog inputs
0380 43F681     109            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0383 43E101     110            orl ADCCON1, #0x01 ; Enable ADC
0386            111            
0386 22         112            ret
0387            113            
0387            114   wait_1ms:
0387 C28C       115            clr     TR0 ; Stop timer 0
0389 C28D       116            clr     TF0 ; Clear overflow flag
038B 758CFB     117            mov     TH0, #high(TIMER0_RELOAD)
038E 758A33     118            mov     TL0,#low(TIMER0_RELOAD)
0391 D28C       119            setb TR0
0393 308DFD     120            jnb     TF0, $ ; Wait for overflow
0396 22         121            ret
0397            122   
0397            123   ; Wait the number of miliseconds in R2
0397            124   waitms:
0397 120387     125            lcall wait_1ms
039A DAFB       126            djnz R2, waitms
039C 22         127            ret
039D            128   
039D            129   ; We can display a number any way we want.  In this case with
039D            130   ; four decimal places.
039D            131   Display_formated_BCD:
039D C0E0       132            push acc
039F 7401       132            mov a, #1
03A1 14         132            dec a
03A2 1200B0     132            lcall ?Set_Cursor_2 ; Select column and row
03A5 D0E0       132            pop acc
03A7 C000       133            push ar0
03A9 A83A       133            mov r0, bcd+2
03AB 1200B7     133            lcall ?Display_BCD
03AE D000       133            pop ar0
03B0 C000       134            push ar0
03B2 A839       134            mov r0, bcd+1
03B4 1200B7     134            lcall ?Display_BCD
03B7 D000       134            pop ar0
03B9 C0E0       135            push acc
03BB 742E       135            mov a, #'.'
03BD 120068     135            lcall ?WriteData
03C0 D0E0       135            pop acc
03C2 C000       136            push ar0
03C4 A838       136            mov r0, bcd+0
03C6 1200B7     136            lcall ?Display_BCD
03C9 D000       136            pop ar0
03CB C0E0       137            push acc
03CD 74DF       137            mov a, #0xDF
03CF 120068     137            lcall ?WriteData
03D2 D0E0       137            pop acc
03D4 C0E0       138            push acc
03D6 7443       138            mov a, #'C'
03D8 120068     138            lcall ?WriteData
03DB D0E0       138            pop acc
03DD C0E0       139            push acc
03DF 7401       139            mov a, #1
03E1 14         139            dec a
03E2 1200B0     139            lcall ?Set_Cursor_2 ; Select column and row
03E5 D0E0       139            pop acc
03E7 C0E0       140            push acc
03E9 7420       140            mov a, #' '
03EB 120068     140            lcall ?WriteData
03EE D0E0       140            pop acc
03F0 22         141            ret
03F1            142   
03F1            143   Read_ADC:
03F1 C2EF       144            clr ADCF
03F3 D2EE       145            setb ADCS ;  ADC start trigger signal
03F5 30EFFD     146       jnb ADCF, $ ; Wait for conversion complete
03F8            147       
03F8            148       ; Read the ADC result and store in [R1, R0]
03F8 E5C2       149       mov a, ADCRL
03FA 540F       150       anl a, #0x0f
03FC F8         151       mov R0, a
03FD E5C3       152       mov a, ADCRH   
03FF C4         153       swap a
0400 C0E0       154       push acc
0402 540F       155       anl a, #0x0f
0404 F9         156       mov R1, a
0405 D0E0       157       pop acc
0407 54F0       158       anl a, #0xf0
0409 48         159       orl a, R0
040A F8         160       mov R0, A
040B 22         161            ret
040C            162   
040C            163   main:
040C 75817F     164            mov sp, #0x7f
040F 12033D     165            lcall Init_All
0412 120072     166       lcall LCD_4BIT
0415            167   
0415 754501     168            mov MeasurementCounter+0, #1
0418 754600     169            mov MeasurementCounter+1, #0
041B            170   
041B 754901     171            mov TimePerSample, #1
041E            172   
041E 75472C     173            mov SamplesPerDisplay+0, #low(SAMPLES_PER_DISPLAY)
0421 754801     174            mov SamplesPerDisplay+1, #high(SAMPLES_PER_DISPLAY)
0424            175            
0424 754A00     176            mov LastMeasurement+0, #0
0427 754B00     177            mov LastMeasurement+1, #0
042A 754C00     178            mov LastMeasurement+2, #0
042D 754D00     179            mov LastMeasurement+3, #0
0430            180       
0430            181       ; initial messages in LCD
0430 C0E0       182            push acc
0432 7401       182            mov a, #1
0434 14         182            dec a
0435 1200B2     182            lcall ?Set_Cursor_1 ; Select column and row
0438 D0E0       182            pop acc
043A C083       183            push dph
043C C082       183            push dpl
043E C0E0       183            push acc
0440 900003     183            mov dptr, #test_message
0443 1200A5     183            lcall ?Send_Constant_String
0446 D0E0       183            pop acc
0448 D082       183            pop dpl
044A D083       183            pop dph
044C 02048D     184            ljmp Forever
044F            185   
044F            186   SendBCD:
044F E53A       187            mov a, bcd+2
0451 54F0       188            anl a, #0xF0 ; Isolate tens place
0453 C4         189            swap a ; Put high nibble into lower nibble
0454 2430       190            add a, #'0' ; Convert value to ASCII
0456 120485     191            lcall SendSerial
0459            192   
0459 E53A       193            mov a, bcd+2
045B 540F       194            anl a, #0x0F ; Isolate ones place
045D 2430       195            add a, #'0' ; Convert value to ASCII
045F 120485     196            lcall SendSerial
0462            197   
0462 742E       198            mov a, #'.'
0464 120485     199            lcall SendSerial
0467            200   
0467 E539       201            mov a, bcd+1
0469 54F0       202            anl a, #0xF0 ; Isolate 0.1 place
046B C4         203            swap a ; Put high nibble into lower nibble
046C 2430       204            add a, #'0' ; Convert value to ASCII
046E 120485     205            lcall SendSerial
0471            206   
0471 E539       207            mov a, bcd+1
0473 540F       208            anl a, #0x0F ; Isolate 0.01 place
0475 2430       209            add a, #'0' ; Convert value to ASCII
0477 120485     210            lcall SendSerial
047A            211   
047A 740A       212            mov a, #'\n'
047C 120485     213            lcall SendSerial
047F            214   
047F 740D       215            mov a, #'\r'
0481 120485     216            lcall SendSerial
0484            217   
0484 22         218            ret
0485            219   
0485            220   SendSerial:
0485 C299       221            clr TI
0487 F599       222            mov SBUF, a
0489 3099FD     223            jnb TI, $
048C 22         224            ret
048D            225   
048D            226   Forever:
048D            227   
048D            228            ; Read the 4.096V LM4040 voltage connected to AIN0 on pin 6
048D 53E8F0     229            anl ADCCON0, #0xF0
0490 43E800     230            orl ADCCON0, #0x00 ; Select channel 0
0493            231   
0493 1203F1     232            lcall Read_ADC
0496            233            ; Save result for later use
0496 883D       234            mov VAL_LM4040+0, R0
0498 893E       235            mov VAL_LM4040+1, R1
049A            236   
049A            237            ; Read the signal connected to AIN7 (This reads the LM335)
049A 53E8F0     238            anl ADCCON0, #0xF0
049D 43E807     239            orl ADCCON0, #0x07 ; Select channel 7
04A0 1203F1     240            lcall Read_ADC
04A3            241       
04A3            242       ; Convert to voltage
04A3 8830       243            mov x+0, R0
04A5 8931       244            mov x+1, R1
04A7            245            ; Pad other bits with zero
04A7 753200     246            mov x+2, #0
04AA 753300     247            mov x+3, #0
04AD 7534FF     248            mov y+0, #low (40959 % 0x10000) 
04B0 75359F     248            mov y+1, #high(40959 % 0x10000) 
04B3 753600     248            mov y+2, #low (40959 / 0x10000) 
04B6 753700     248            mov y+3, #high(40959 / 0x10000)  ; The MEASURED voltage reference: 4.0959V, with 4 decimal places
04B9 120247     249            lcall mul32
04BC            250            ; Retrive the ADC LM4040 value
04BC 853D34     251            mov y+0, VAL_LM4040+0
04BF 853E35     252            mov y+1, VAL_LM4040+1
04C2            253            ; Pad other bits with zero
04C2 753600     254            mov y+2, #0
04C5 753700     255            mov y+3, #0
04C8 1202D4     256            lcall div32
04CB            257   
04CB            258   
04CB 853F34     259            mov y+0, StoreMeasurements+0
04CE 854035     260            mov y+1, StoreMeasurements+1
04D1 854136     261            mov y+2, StoreMeasurements+2
04D4 854237     262            mov y+3, StoreMeasurements+3
04D7            263   
04D7 120192     264            lcall add32
04DA            265            
04DA 85303F     266            mov StoreMeasurements+0, x+0
04DD 853140     267            mov StoreMeasurements+1, x+1
04E0 853241     268            mov StoreMeasurements+2, x+2
04E3 853342     269            mov StoreMeasurements+3, x+3
04E6            270            
04E6            271   ;;;SPLIT
04E6            272   
04E6            273            ; Read the signal connected to AIN4 Tthis reads analog signal of the OP07/Thermocouple)
04E6 53E8F0     274            anl ADCCON0, #0xF0
04E9 43E804     275            orl ADCCON0, #0x04 ; Select channel 4
04EC 1203F1     276            lcall Read_ADC
04EF            277       
04EF            278       ; Convert to voltage
04EF 8830       279            mov x+0, R0
04F1 8931       280            mov x+1, R1
04F3            281            ; Pad other bits with zero
04F3 753200     282            mov x+2, #0
04F6 753300     283            mov x+3, #0
04F9 7534FF     284            mov y+0, #low (40959 % 0x10000) 
04FC 75359F     284            mov y+1, #high(40959 % 0x10000) 
04FF 753600     284            mov y+2, #low (40959 / 0x10000) 
0502 753700     284            mov y+3, #high(40959 / 0x10000)  ; The MEASURED voltage reference: 4.0959V, with 4 decimal places
0505 120247     285            lcall mul32
0508            286            ; Retrive the ADC LM4040 value
0508 853D34     287            mov y+0, VAL_LM4040+0
050B 853E35     288            mov y+1, VAL_LM4040+1
050E            289            ; Pad other bits with zero
050E 753600     290            mov y+2, #0
0511 753700     291            mov y+3, #0
0514 1202D4     292            lcall div32
0517            293   
0517            294   
0517 854E34     295            mov y+0, StoreThermocouple+0
051A 854F35     296            mov y+1, StoreThermocouple+1
051D 855036     297            mov y+2, StoreThermocouple+2
0520 855137     298            mov y+3, StoreThermocouple+3
0523            299   
0523 120192     300            lcall add32
0526            301            
0526 85304E     302            mov StoreThermocouple+0, x+0
0529 85314F     303            mov StoreThermocouple+1, x+1
052C 853250     304            mov StoreThermocouple+2, x+2
052F 853351     305            mov StoreThermocouple+3, x+3
0532            306   
0532 AA49       307            mov R2, TimePerSample
0534 120397     308            lcall waitms
0537            309   
0537            310            ;Checks if enough measurements have been taken
0537            311            
0537 1545       312            dec MeasurementCounter+0
0539 E545       313            mov a, MeasurementCounter+0
053B B4FF02     314            cjne a, #0xFF, CheckHigh
053E 1546       315            dec MeasurementCounter+1
0540            316            CheckHigh:
0540 E545       317            mov a, MeasurementCounter+0
0542 4546       318            orl a, MeasurementCounter+1
0544 6003       319            jz DisplayValue
0546 0205FA     320            ljmp EndForever
0549            321            
0549            322            ;Divides stored measurements by number of measurements taken
0549            323   DisplayValue:    
0549 753400     324            mov y+0, #low (0 % 0x10000) 
054C 753500     324            mov y+1, #high(0 % 0x10000) 
054F 753600     324            mov y+2, #low (0 / 0x10000) 
0552 753700     324            mov y+3, #high(0 / 0x10000) 
0555            325            
0555 853F30     326            mov x+0, StoreMeasurements+0
0558 854031     327            mov x+1, StoreMeasurements+1
055B 854132     328            mov x+2, StoreMeasurements+2
055E 854233     329            mov x+3, StoreMeasurements+3
0561            330            
0561 E547       331            mov a, SamplesPerDisplay+0
0563 F534       332            mov y+0, a
0565 F545       333            mov MeasurementCounter+0, a
0567            334   
0567 E548       335            mov a, SamplesPerDisplay+1
0569 F535       336            mov y+1, a
056B F546       337            mov MeasurementCounter+1, a     
056D            338            
056D 1202D4     339            lcall div32
0570            340            
0570            341            ;Load_y(100)
0570            342            ;lcall mul32
0570            343   
0570 7534A4     344            mov y+0, #low (27300 % 0x10000) 
0573 75356A     344            mov y+1, #high(27300 % 0x10000) 
0576 753600     344            mov y+2, #low (27300 / 0x10000) 
0579 753700     344            mov y+3, #high(27300 / 0x10000) 
057C 1201B3     345            lcall sub32
057F            346            
057F 853052     347            mov FinalLM335+0, x+0 ;Stores final LM335 value in degrees C
0582 853153     348            mov FinalLM335+1, x+1
0585 853254     349            mov FinalLM335+2, x+2
0588 853355     350            mov FinalLM335+3, x+3
058B            351            
058B            352            ;Does same as above, but for the thermocouple
058B            353            
058B 753400     354            mov y+0, #low (0 % 0x10000) 
058E 753500     354            mov y+1, #high(0 % 0x10000) 
0591 753600     354            mov y+2, #low (0 / 0x10000) 
0594 753700     354            mov y+3, #high(0 / 0x10000) 
0597            355            
0597 854E30     356            mov x+0, StoreThermocouple+0
059A 854F31     357            mov x+1, StoreThermocouple+1
059D 855032     358            mov x+2, StoreThermocouple+2
05A0 855133     359            mov x+3, StoreThermocouple+3
05A3            360            
05A3 E547       361            mov a, SamplesPerDisplay+0
05A5 F534       362            mov y+0, a
05A7 F545       363            mov MeasurementCounter+0, a
05A9            364   
05A9 E548       365            mov a, SamplesPerDisplay+1
05AB F535       366            mov y+1, a
05AD F546       367            mov MeasurementCounter+1, a     
05AF            368            
05AF 1202D4     369            lcall div32
05B2            370            
05B2            371            ;Load_y(100)
05B2            372            ;lcall mul32 ;Note that the final thermocouple value in degrees C is now stored in x
05B2            373            
05B2 753400     374            mov y+0, #low (0 % 0x10000) 
05B5 753500     374            mov y+1, #high(0 % 0x10000) 
05B8 753600     374            mov y+2, #low (0 / 0x10000) 
05BB 753700     374            mov y+3, #high(0 / 0x10000) 
05BE 855234     375            mov y+0, FinalLM335+0
05C1 855335     376            mov y+1, FinalLM335+1
05C4 855436     377            mov y+2, FinalLM335+2
05C7 855537     378            mov y+3, FinalLM335+3
05CA            379   
05CA            380            
05CA 120192     381            lcall add32 ; Puts the final temperature value into x
05CD            382            
05CD            383            
05CD            384            ; Convert to BCD and display
05CD 1200CD     385            lcall hex2bcd
05D0 12039D     386            lcall Display_formated_BCD
05D3            387   
05D3 12044F     388            lcall SendBCD
05D6            389   
05D6 753F00     390            mov StoreMeasurements+0, #0
05D9 754000     391            mov StoreMeasurements+1, #0
05DC 754100     392            mov StoreMeasurements+2, #0
05DF 754200     393            mov StoreMeasurements+3, #0
05E2            394            
05E2 754E00     395            mov StoreThermocouple+0, #0
05E5 754F00     396            mov StoreThermocouple+1, #0
05E8 755000     397            mov StoreThermocouple+2, #0
05EB 755100     398            mov StoreThermocouple+3, #0
05EE            399            
05EE 755200     400            mov FinalLM335+0, #0
05F1 755301     401            mov FinalLM335+1, #1
05F4 755402     402            mov FinalLM335+2, #2
05F7 755503     403            mov FinalLM335+3, #3
05FA            404   
05FA            405   
05FA            406   EndForever:
05FA 753000     407            mov x+0, #0
05FD 753100     408            mov x+1, #0
0600 753200     409            mov x+2, #0
0603 753300     410            mov x+3, #0
0606 02048D     411            ljmp Forever
0609            412   
0609            413   END
