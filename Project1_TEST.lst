0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   ; This version uses the LM4040 voltage reference connected to pin 6 (P1.7/AIN0)
0000              3   
                  5   $LIST
0000              7   
0000              8   ;  N76E003 pinout:
0000              9   ;                               -------
0000             10   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             11   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             12   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             13   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             14   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             15   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             16   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             18   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             19   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             20   ;                               -------
0000             21   ;
0000             22   
0000             23   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             24   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             25   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             26   TIMER0_RELOAD EQU (0x10000-(CLK/TIMER0_DENOM))
0000             27   
0000             28   SAMPLES_PER_DISPLAY equ 255 
0000             29   REFRESHES_PER_SECOND equ 16 ;Does not work properly for high number of samples/display, actual refreshes/sec is less than value given if samples/display is higher than around 255
0000             30   TIMER0_DENOM equ (SAMPLES_PER_DISPLAY*REFRESHES_PER_SECOND)
0000             31   
0000             32   ORG 0x0000
0000 0203FA      33            ljmp main
0003             34   
0003             35   ;                     1234567890123456    <- This helps determine the location of the counter
0003 43757272    36   test_message:     db 'Current Temp.:', 0
     656E7420
     54656D70
     2E3A00
0012 4465672E    37   value_message:    db 'Deg. C', 0
     204300
0019             38   cseg
0019             39   ; These 'equ' must match the hardware wiring
0019             40   LCD_RS equ P1.3
0019             41   LCD_E  equ P1.4
0019             42   LCD_D4 equ P0.0
0019             43   LCD_D5 equ P0.1
0019             44   LCD_D6 equ P0.2
0019             45   LCD_D7 equ P0.3
0019             46   SSR_BOX equ P0.5
0019             47   
0019             48   
                 50   	$LIST
00CD             52   
00CD             53   ; These register definitions needed by 'math32.inc'
0030             54   DSEG at 30H
0030             55   x:   ds 4
0034             56   y:   ds 4
0038             57   bcd: ds 5
003D             58   VAL_LM4040: ds 2
003F             59   
003F             60   StoreMeasurements: ds 4
0043             61   TempStore: ds 2
0045             62   MeasurementCounter: ds 2
0047             63   SamplesPerDisplay: ds 2
0049             64   TimePerSample: ds 1
004A             65   LastMeasurement: ds 4
004E             66   
0000             67   BSEG
0000             68   mf: dbit 1
0001             69   
                546   $LIST
                 71   $LIST
033D             73   
033D             74   Init_All:
033D             75            ; Configure all the pins for biderectional I/O
033D 75AC00      76            mov     P3M1, #0x00
0340 75AD00      77            mov     P3M2, #0x00
0343 75B300      78            mov     P1M1, #0x00
0346 75B400      79            mov     P1M2, #0x00
0349 75B100      80            mov     P0M1, #0x00
034C 75B200      81            mov     P0M2, #0x00
034F             82            
034F 438E10      83            orl     CKCON, #0x10 ; CLK is the input for timer 1
0352 438780      84            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
0355 759852      85            mov     SCON, #0x52
0358 53C4DF      86            anl     T3CON, #0b11011111
035B 53890F      87            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
035E 438920      88            orl     TMOD, #0x20 ; Timer 1 Mode 2
0361 758DF7      89            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0364 D28E        90            setb TR1
0366             91            
0366             92            ; Using timer 0 for delay functions.  Initialize here:
0366 C28C        93            clr     TR0 ; Stop timer 0
0368 438E08      94            orl     CKCON,#0x08 ; CLK is the input for timer 0
036B 5389F0      95            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
036E 438901      96            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0371             97            
0371             98            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0371 43B382      99            orl     P1M1, #0b10000010
0374 53B47D     100            anl     P1M2, #0b01111101
0377            101            
0377            102            ; Initialize and start the ADC:
0377 53E8F0     103            anl ADCCON0, #0xF0
037A 43E807     104            orl ADCCON0, #0x07 ; Select channel 7
037D            105            ; AINDIDS select if some pins are analog inputs or digital I/O:
037D 75F600     106            mov AINDIDS, #0x00 ; Disable all analog inputs
0380 43F681     107            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0383 43E101     108            orl ADCCON1, #0x01 ; Enable ADC
0386            109            
0386 22         110            ret
0387            111            
0387            112   wait_1ms:
0387 C28C       113            clr     TR0 ; Stop timer 0
0389 C28D       114            clr     TF0 ; Clear overflow flag
038B 758CF0     115            mov     TH0, #high(TIMER0_RELOAD)
038E 758A1C     116            mov     TL0,#low(TIMER0_RELOAD)
0391 D28C       117            setb TR0
0393 308DFD     118            jnb     TF0, $ ; Wait for overflow
0396 22         119            ret
0397            120   
0397            121   ; Wait the number of miliseconds in R2
0397            122   waitms:
0397 120387     123            lcall wait_1ms
039A DAFB       124            djnz R2, waitms
039C 22         125            ret
039D            126   
039D            127   ; We can display a number any way we want.  In this case with
039D            128   ; four decimal places.
039D            129   Display_formated_BCD:
039D C0E0       130            push acc
039F 7401       130            mov a, #1
03A1 14         130            dec a
03A2 1200B0     130            lcall ?Set_Cursor_2 ; Select column and row
03A5 D0E0       130            pop acc
03A7 C000       131            push ar0
03A9 A83A       131            mov r0, bcd+2
03AB 1200B7     131            lcall ?Display_BCD
03AE D000       131            pop ar0
03B0 C0E0       132            push acc
03B2 742E       132            mov a, #'.'
03B4 120068     132            lcall ?WriteData
03B7 D0E0       132            pop acc
03B9 C000       133            push ar0
03BB A839       133            mov r0, bcd+1
03BD 1200B7     133            lcall ?Display_BCD
03C0 D000       133            pop ar0
03C2 C0E0       134            push acc
03C4 74DF       134            mov a, #0xDF
03C6 120068     134            lcall ?WriteData
03C9 D0E0       134            pop acc
03CB C0E0       135            push acc
03CD 7407       135            mov a, #7
03CF 14         135            dec a
03D0 1200B0     135            lcall ?Set_Cursor_2 ; Select column and row
03D3 D0E0       135            pop acc
03D5 C0E0       136            push acc
03D7 7443       136            mov a, #'C'
03D9 120068     136            lcall ?WriteData
03DC D0E0       136            pop acc
03DE 22         137            ret
03DF            138   
03DF            139   Read_ADC:
03DF C2EF       140            clr ADCF
03E1 D2EE       141            setb ADCS ;  ADC start trigger signal
03E3 30EFFD     142       jnb ADCF, $ ; Wait for conversion complete
03E6            143       
03E6            144       ; Read the ADC result and store in [R1, R0]
03E6 E5C2       145       mov a, ADCRL
03E8 540F       146       anl a, #0x0f
03EA F8         147       mov R0, a
03EB E5C3       148       mov a, ADCRH   
03ED C4         149       swap a
03EE C0E0       150       push acc
03F0 540F       151       anl a, #0x0f
03F2 F9         152       mov R1, a
03F3 D0E0       153       pop acc
03F5 54F0       154       anl a, #0xf0
03F7 48         155       orl a, R0
03F8 F8         156       mov R0, A
03F9 22         157            ret
03FA            158   
03FA            159   main:
03FA 75817F     160            mov sp, #0x7f
03FD 12033D     161            lcall Init_All
0400 120072     162       lcall LCD_4BIT
0403            163   
0403 754501     164            mov MeasurementCounter+0, #1
0406 754600     165            mov MeasurementCounter+1, #0
0409            166   
0409 754901     167            mov TimePerSample, #1
040C            168   
040C 7547FF     169            mov SamplesPerDisplay+0, #low(SAMPLES_PER_DISPLAY)
040F 754800     170            mov SamplesPerDisplay+1, #high(SAMPLES_PER_DISPLAY)
0412            171            
0412 754A00     172            mov LastMeasurement+0, #0
0415 754B00     173            mov LastMeasurement+1, #0
0418 754C00     174            mov LastMeasurement+2, #0
041B 754D00     175            mov LastMeasurement+3, #0
041E            176       
041E            177       ; initial messages in LCD
041E C0E0       178            push acc
0420 7401       178            mov a, #1
0422 14         178            dec a
0423 1200B2     178            lcall ?Set_Cursor_1 ; Select column and row
0426 D0E0       178            pop acc
0428 C083       179            push dph
042A C082       179            push dpl
042C C0E0       179            push acc
042E 900003     179            mov dptr, #test_message
0431 1200A5     179            lcall ?Send_Constant_String
0434 D0E0       179            pop acc
0436 D082       179            pop dpl
0438 D083       179            pop dph
043A 02047B     180            ljmp Forever
043D            181   
043D            182   SendBCD:
043D E53A       183            mov a, bcd+2
043F 54F0       184            anl a, #0xF0 ; Isolate tens place
0441 C4         185            swap a ; Put high nibble into lower nibble
0442 2430       186            add a, #'0' ; Convert value to ASCII
0444 120473     187            lcall SendSerial
0447            188   
0447 E53A       189            mov a, bcd+2
0449 540F       190            anl a, #0x0F ; Isolate ones place
044B 2430       191            add a, #'0' ; Convert value to ASCII
044D 120473     192            lcall SendSerial
0450            193   
0450 742E       194            mov a, #'.'
0452 120473     195            lcall SendSerial
0455            196   
0455 E539       197            mov a, bcd+1
0457 54F0       198            anl a, #0xF0 ; Isolate 0.1 place
0459 C4         199            swap a ; Put high nibble into lower nibble
045A 2430       200            add a, #'0' ; Convert value to ASCII
045C 120473     201            lcall SendSerial
045F            202   
045F E539       203            mov a, bcd+1
0461 540F       204            anl a, #0x0F ; Isolate 0.01 place
0463 2430       205            add a, #'0' ; Convert value to ASCII
0465 120473     206            lcall SendSerial
0468            207   
0468 740A       208            mov a, #'\n'
046A 120473     209            lcall SendSerial
046D            210   
046D 740D       211            mov a, #'\r'
046F 120473     212            lcall SendSerial
0472            213   
0472 22         214            ret
0473            215   
0473            216   SendSerial:
0473 C299       217            clr TI
0475 F599       218            mov SBUF, a
0477 3099FD     219            jnb TI, $
047A 22         220            ret
047B            221   
047B            222   Forever:
047B            223   
047B            224            ; Read the 2.08V LM4040 voltage connected to AIN0 on pin 6
047B 53E8F0     225            anl ADCCON0, #0xF0
047E 43E800     226            orl ADCCON0, #0x00 ; Select channel 0
0481            227   
0481 1203DF     228            lcall Read_ADC
0484            229            ; Save result for later use
0484 883D       230            mov VAL_LM4040+0, R0
0486 893E       231            mov VAL_LM4040+1, R1
0488            232   
0488            233            ; Read the signal connected to AIN7 (for testing, this reads analog signal of opamp)
0488 53E8F0     234            anl ADCCON0, #0xF0
048B 43E807     235            orl ADCCON0, #0x07 ; Select channel 7
048E 1203DF     236            lcall Read_ADC
0491            237       
0491            238       ; Convert to voltage
0491 8830       239            mov x+0, R0
0493 8931       240            mov x+1, R1
0495            241            ; Pad other bits with zero
0495 753200     242            mov x+2, #0
0498 753300     243            mov x+3, #0
049B 7534FF     244            mov y+0, #low (40959 % 0x10000) 
049E 75359F     244            mov y+1, #high(40959 % 0x10000) 
04A1 753600     244            mov y+2, #low (40959 / 0x10000) 
04A4 753700     244            mov y+3, #high(40959 / 0x10000)  ; The MEASURED voltage reference: 4.0959V, with 4 decimal places
04A7 120247     245            lcall mul32
04AA            246            ; Retrive the ADC LM4040 value
04AA 853D34     247            mov y+0, VAL_LM4040+0
04AD 853E35     248            mov y+1, VAL_LM4040+1
04B0            249            ; Pad other bits with zero
04B0 753600     250            mov y+2, #0
04B3 753700     251            mov y+3, #0
04B6 1202D4     252            lcall div32
04B9            253   
04B9            254   
04B9 853F34     255            mov y+0, StoreMeasurements+0
04BC 854035     256            mov y+1, StoreMeasurements+1
04BF 854136     257            mov y+2, StoreMeasurements+2
04C2 854237     258            mov y+3, StoreMeasurements+3
04C5            259   
04C5 120192     260            lcall add32
04C8            261            
04C8 85303F     262            mov StoreMeasurements+0, x+0
04CB 853140     263            mov StoreMeasurements+1, x+1
04CE 853241     264            mov StoreMeasurements+2, x+2
04D1 853342     265            mov StoreMeasurements+3, x+3
04D4            266   
04D4 AA49       267            mov R2, TimePerSample
04D6 120397     268            lcall waitms
04D9            269   
04D9            270            ;dec MeasurementCounter
04D9            271            ;mov a, MeasurementCounter
04D9            272            ;jnz EndForever
04D9            273   
04D9 1545       274            dec MeasurementCounter+0
04DB E545       275            mov a, MeasurementCounter+0
04DD B4FF02     276            cjne a, #0xFF, CheckHigh
04E0 1546       277            dec MeasurementCounter+1
04E2            278            CheckHigh:
04E2 E545       279            mov a, MeasurementCounter+0
04E4 4546       280            orl a, MeasurementCounter+1
04E6 7069       281            jnz EndForever
04E8            282   
04E8 753400     283            mov y+0, #low (0 % 0x10000) 
04EB 753500     283            mov y+1, #high(0 % 0x10000) 
04EE 753600     283            mov y+2, #low (0 / 0x10000) 
04F1 753700     283            mov y+3, #high(0 / 0x10000) 
04F4 E547       284            mov a, SamplesPerDisplay+0
04F6 F534       285            mov y+0, a
04F8 F545       286            mov MeasurementCounter+0, a
04FA            287   
04FA E548       288            mov a, SamplesPerDisplay+1
04FC F535       289            mov y+1, a
04FE F546       290            mov MeasurementCounter+1, a     
0500 1202D4     291            lcall div32
0503            292   
0503 7534E8     293            mov y+0, #low (1000 % 0x10000) 
0506 753503     293            mov y+1, #high(1000 % 0x10000) 
0509 753600     293            mov y+2, #low (1000 / 0x10000) 
050C 753700     293            mov y+3, #high(1000 / 0x10000) 
050F 120247     294            lcall mul32
0512            295   
0512            296            ;load_y(2730000)
0512            297            ;lcall sub32
0512            298            
0512            299            ;Load_y(220000)
0512            300            ;lcall add32
0512            301   
0512 854A34     302            mov y+0, LastMeasurement+0
0515 854B35     303            mov y+1, LastMeasurement+1
0518 854C36     304            mov y+2, LastMeasurement+2
051B 854D37     305            mov y+3, LastMeasurement+3
051E            306   
051E 85304A     307            mov LastMeasurement+0, x+0
0521 85314B     308            mov LastMeasurement+1, x+1
0524 85324C     309            mov LastMeasurement+2, x+2
0527 85334D     310            mov LastMeasurement+3, x+3
052A            311   
052A 120192     312            lcall add32
052D 753402     313            mov y+0, #low (2 % 0x10000) 
0530 753500     313            mov y+1, #high(2 % 0x10000) 
0533 753600     313            mov y+2, #low (2 / 0x10000) 
0536 753700     313            mov y+3, #high(2 / 0x10000) 
0539 1202D4     314            lcall div32
053C            315   
053C            316            
053C            317   
053C            318            ; Convert to BCD and display
053C 1200CD     319            lcall hex2bcd
053F 12039D     320            lcall Display_formated_BCD
0542            321   
0542 12043D     322            lcall SendBCD
0545            323   
0545 753F00     324            mov StoreMeasurements+0, #0
0548 754000     325            mov StoreMeasurements+1, #0
054B 754100     326            mov StoreMeasurements+2, #0
054E 754200     327            mov StoreMeasurements+3, #0
0551            328   
0551            329   EndForever:
0551 753000     330            mov x+0, #0
0554 753100     331            mov x+1, #0
0557 753200     332            mov x+2, #0
055A 753300     333            mov x+3, #0
055D 02047B     334            ljmp Forever
0560            335   
0560            336   END
