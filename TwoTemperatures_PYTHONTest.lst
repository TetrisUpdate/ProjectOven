0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   ; This version uses the LM4040 voltage reference connected to pin 6 (P1.7/AIN0)
0000              3   
                  5   $LIST
0000              7   
0000              8   ;  N76E003 pinout:
0000              9   ;                               -------
0000             10   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             11   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             12   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             13   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             14   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             15   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             16   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             18   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             19   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             20   ;                               -------
0000             21   ;
0000             22   
0000             23   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             24   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             25   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             26   TIMER0_RELOAD EQU (0x10000-(CLK/TIMER0_DENOM))
0000             27   
0000             28   SAMPLES_PER_DISPLAY equ 150
0000             29   REFRESHES_PER_SECOND equ 15 ;Does not work properly for high number of samples/display, actual refreshes/sec is less than value given if samples/display is higher than around 255
0000             30   TIMER0_DENOM equ (SAMPLES_PER_DISPLAY*REFRESHES_PER_SECOND)
0000             31   
0000             32   ORG 0x0000
0000 02040C      33            ljmp main
0003             34   
0003             35   ;                     1234567890123456    <- This helps determine the location of the counter
0003 43757272    36   test_message:     db 'Current Temp.:', 0
     656E7420
     54656D70
     2E3A00
0012 4465672E    37   value_message:    db 'Deg. C', 0
     204300
0019             38   cseg
0019             39   ; These 'equ' must match the hardware wiring
0019             40   LCD_RS equ P1.3
0019             41   LCD_E  equ P1.4
0019             42   LCD_D4 equ P0.0
0019             43   LCD_D5 equ P0.1
0019             44   LCD_D6 equ P0.2
0019             45   LCD_D7 equ P0.3
0019             46   SSR_BOX equ P0.5
0019             47   
0019             48   
                 50   	$LIST
00CD             52   
00CD             53   ; These register definitions needed by 'math32.inc'
0030             54   DSEG at 30H
0030             55   x:   ds 4
0034             56   y:   ds 4
0038             57   bcd: ds 5
003D             58   VAL_LM4040: ds 2
003F             59   
003F             60   StoreMeasurements: ds 4
0043             61   TempStore: ds 2
0045             62   MeasurementCounter: ds 2
0047             63   SamplesPerDisplay: ds 2
0049             64   TimePerSample: ds 1
004A             65   LastMeasurement: ds 4
004E             66   StoreThermocouple: ds 4
0052             67   FinalLM335: ds 4
0056             68   
0000             69   BSEG
0000             70   mf: dbit 1
0001             71   
                546   $LIST
                 73   $LIST
033D             75   
033D             76   Init_All:
033D             77            ; Configure all the pins for biderectional I/O
033D 75AC00      78            mov     P3M1, #0x00
0340 75AD00      79            mov     P3M2, #0x00
0343 75B300      80            mov     P1M1, #0x00
0346 75B400      81            mov     P1M2, #0x00
0349 75B100      82            mov     P0M1, #0x00
034C 75B200      83            mov     P0M2, #0x00
034F             84            
034F 438E10      85            orl     CKCON, #0x10 ; CLK is the input for timer 1
0352 438780      86            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
0355 759852      87            mov     SCON, #0x52
0358 53C4DF      88            anl     T3CON, #0b11011111
035B 53890F      89            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
035E 438920      90            orl     TMOD, #0x20 ; Timer 1 Mode 2
0361 758DF7      91            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0364 D28E        92            setb TR1
0366             93            
0366             94            ; Using timer 0 for delay functions.  Initialize here:
0366 C28C        95            clr     TR0 ; Stop timer 0
0368 438E08      96            orl     CKCON,#0x08 ; CLK is the input for timer 0
036B 5389F0      97            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
036E 438901      98            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
0371             99            
0371            100            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
0371 43B382     101            orl     P1M1, #0b10000010
0374 53B47D     102            anl     P1M2, #0b01111101
0377            103            
0377            104            ; Initialize and start the ADC:
0377 53E8F0     105            anl ADCCON0, #0xF0
037A 43E807     106            orl ADCCON0, #0x07 ; Select channel 7
037D            107            ; AINDIDS select if some pins are analog inputs or digital I/O:
037D 75F600     108            mov AINDIDS, #0x00 ; Disable all analog inputs
0380 43F681     109            orl AINDIDS, #0b10000001 ; Activate AIN0 and AIN7 analog inputs
0383 43E101     110            orl ADCCON1, #0x01 ; Enable ADC
0386            111            
0386 22         112            ret
0387            113            
0387            114   wait_1ms:
0387 C28C       115            clr     TR0 ; Stop timer 0
0389 C28D       116            clr     TF0 ; Clear overflow flag
038B 758CE3     117            mov     TH0, #high(TIMER0_RELOAD)
038E 758A2F     118            mov     TL0,#low(TIMER0_RELOAD)
0391 D28C       119            setb TR0
0393 308DFD     120            jnb     TF0, $ ; Wait for overflow
0396 22         121            ret
0397            122   
0397            123   ; Wait the number of miliseconds in R2
0397            124   waitms:
0397 120387     125            lcall wait_1ms
039A DAFB       126            djnz R2, waitms
039C 22         127            ret
039D            128   
039D            129   ; We can display a number any way we want.  In this case with
039D            130   ; four decimal places.
039D            131   Display_formated_BCD:
039D C0E0       132            push acc
039F 7401       132            mov a, #1
03A1 14         132            dec a
03A2 1200B0     132            lcall ?Set_Cursor_2 ; Select column and row
03A5 D0E0       132            pop acc
03A7 C000       133            push ar0
03A9 A83A       133            mov r0, bcd+2
03AB 1200B7     133            lcall ?Display_BCD
03AE D000       133            pop ar0
03B0 C000       134            push ar0
03B2 A839       134            mov r0, bcd+1
03B4 1200B7     134            lcall ?Display_BCD
03B7 D000       134            pop ar0
03B9 C0E0       135            push acc
03BB 742E       135            mov a, #'.'
03BD 120068     135            lcall ?WriteData
03C0 D0E0       135            pop acc
03C2 C000       136            push ar0
03C4 A838       136            mov r0, bcd+0
03C6 1200B7     136            lcall ?Display_BCD
03C9 D000       136            pop ar0
03CB C0E0       137            push acc
03CD 74DF       137            mov a, #0xDF
03CF 120068     137            lcall ?WriteData
03D2 D0E0       137            pop acc
03D4 C0E0       138            push acc
03D6 7443       138            mov a, #'C'
03D8 120068     138            lcall ?WriteData
03DB D0E0       138            pop acc
03DD C0E0       139            push acc
03DF 7401       139            mov a, #1
03E1 14         139            dec a
03E2 1200B0     139            lcall ?Set_Cursor_2 ; Select column and row
03E5 D0E0       139            pop acc
03E7 C0E0       140            push acc
03E9 7420       140            mov a, #' '
03EB 120068     140            lcall ?WriteData
03EE D0E0       140            pop acc
03F0 22         141            ret
03F1            142   
03F1            143   Read_ADC:
03F1 C2EF       144            clr ADCF
03F3 D2EE       145            setb ADCS ;  ADC start trigger signal
03F5 30EFFD     146       jnb ADCF, $ ; Wait for conversion complete
03F8            147       
03F8            148       ; Read the ADC result and store in [R1, R0]
03F8 E5C2       149       mov a, ADCRL
03FA 540F       150       anl a, #0x0f
03FC F8         151       mov R0, a
03FD E5C3       152       mov a, ADCRH   
03FF C4         153       swap a
0400 C0E0       154       push acc
0402 540F       155       anl a, #0x0f
0404 F9         156       mov R1, a
0405 D0E0       157       pop acc
0407 54F0       158       anl a, #0xf0
0409 48         159       orl a, R0
040A F8         160       mov R0, A
040B 22         161            ret
040C            162   
040C            163   main:
040C 75817F     164            mov sp, #0x7f
040F 12033D     165            lcall Init_All
0412 120072     166       lcall LCD_4BIT
0415            167   
0415 754501     168            mov MeasurementCounter+0, #1
0418 754600     169            mov MeasurementCounter+1, #0
041B            170   
041B 754901     171            mov TimePerSample, #1
041E            172   
041E 754796     173            mov SamplesPerDisplay+0, #low(SAMPLES_PER_DISPLAY)
0421 754800     174            mov SamplesPerDisplay+1, #high(SAMPLES_PER_DISPLAY)
0424            175            
0424 754A00     176            mov LastMeasurement+0, #0
0427 754B00     177            mov LastMeasurement+1, #0
042A 754C00     178            mov LastMeasurement+2, #0
042D 754D00     179            mov LastMeasurement+3, #0
0430            180       
0430            181       ; initial messages in LCD
0430 C0E0       182            push acc
0432 7401       182            mov a, #1
0434 14         182            dec a
0435 1200B2     182            lcall ?Set_Cursor_1 ; Select column and row
0438 D0E0       182            pop acc
043A C083       183            push dph
043C C082       183            push dpl
043E C0E0       183            push acc
0440 900003     183            mov dptr, #test_message
0443 1200A5     183            lcall ?Send_Constant_String
0446 D0E0       183            pop acc
0448 D082       183            pop dpl
044A D083       183            pop dph
044C 020496     184            ljmp Forever
044F            185   
044F            186   SendBCD:
044F            187   
044F E53A       188            mov a, bcd+2
0451 540F       189            anl a, #0x0F ; Isolate ones place
0453 2430       190            add a, #'0' ; Convert value to ASCII
0455 12048E     191            lcall SendSerial
0458            192            
0458 E539       193            mov a, bcd+1
045A 54F0       194            anl a, #0xF0 ; Isolate tens place
045C C4         195            swap a ; Put high nibble into lower nibble
045D 2430       196            add a, #'0' ; Convert value to ASCII
045F 12048E     197            lcall SendSerial
0462            198   
0462 E539       199            mov a, bcd+1
0464 540F       200            anl a, #0x0F ; Isolate ones place
0466 2430       201            add a, #'0' ; Convert value to ASCII
0468 12048E     202            lcall SendSerial
046B            203   
046B 742E       204            mov a, #'.'
046D 12048E     205            lcall SendSerial
0470            206   
0470 E538       207            mov a, bcd+0
0472 54F0       208            anl a, #0xF0 ; Isolate 0.1 place
0474 C4         209            swap a ; Put high nibble into lower nibble
0475 2430       210            add a, #'0' ; Convert value to ASCII
0477 12048E     211            lcall SendSerial
047A            212   
047A E538       213            mov a, bcd+0
047C 540F       214            anl a, #0x0F ; Isolate 0.01 place
047E 2430       215            add a, #'0' ; Convert value to ASCII
0480 12048E     216            lcall SendSerial
0483            217   
0483 740A       218            mov a, #'\n'
0485 12048E     219            lcall SendSerial
0488            220   
0488 740D       221            mov a, #'\r'
048A 12048E     222            lcall SendSerial
048D            223   
048D 22         224            ret
048E            225   
048E            226   SendSerial:
048E C299       227            clr TI
0490 F599       228            mov SBUF, a
0492 3099FD     229            jnb TI, $
0495 22         230            ret
0496            231   
0496            232   Forever:
0496            233   
0496            234            ; Read the 4.096V LM4040 voltage connected to AIN0 on pin 6
0496 53E8F0     235            anl ADCCON0, #0xF0
0499 43E800     236            orl ADCCON0, #0x00 ; Select channel 0
049C            237   
049C 1203F1     238            lcall Read_ADC
049F            239            ; Save result for later use
049F 883D       240            mov VAL_LM4040+0, R0
04A1 893E       241            mov VAL_LM4040+1, R1
04A3            242   
04A3            243            ; Read the signal connected to AIN7 (This reads the LM335)
04A3 53E8F0     244            anl ADCCON0, #0xF0
04A6 43E807     245            orl ADCCON0, #0x07 ; Select channel 7
04A9 1203F1     246            lcall Read_ADC
04AC            247       
04AC            248       ; Convert to voltage
04AC 8830       249            mov x+0, R0
04AE 8931       250            mov x+1, R1
04B0            251            ; Pad other bits with zero
04B0 753200     252            mov x+2, #0
04B3 753300     253            mov x+3, #0
04B6 7534FF     254            mov y+0, #low (40959 % 0x10000) 
04B9 75359F     254            mov y+1, #high(40959 % 0x10000) 
04BC 753600     254            mov y+2, #low (40959 / 0x10000) 
04BF 753700     254            mov y+3, #high(40959 / 0x10000)  ; The MEASURED voltage reference: 4.0959V, with 4 decimal places
04C2 120247     255            lcall mul32
04C5            256            ; Retrive the ADC LM4040 value
04C5 853D34     257            mov y+0, VAL_LM4040+0
04C8 853E35     258            mov y+1, VAL_LM4040+1
04CB            259            ; Pad other bits with zero
04CB 753600     260            mov y+2, #0
04CE 753700     261            mov y+3, #0
04D1 1202D4     262            lcall div32
04D4            263   
04D4            264   
04D4 853F34     265            mov y+0, StoreMeasurements+0
04D7 854035     266            mov y+1, StoreMeasurements+1
04DA 854136     267            mov y+2, StoreMeasurements+2
04DD 854237     268            mov y+3, StoreMeasurements+3
04E0            269   
04E0 120192     270            lcall add32
04E3            271            
04E3 85303F     272            mov StoreMeasurements+0, x+0
04E6 853140     273            mov StoreMeasurements+1, x+1
04E9 853241     274            mov StoreMeasurements+2, x+2
04EC 853342     275            mov StoreMeasurements+3, x+3
04EF            276            
04EF            277   
04EF            278   
04EF            279            ; Read the signal connected to AIN4 (this reads analog signal of the OP07/Thermocouple)
04EF 53E8F0     280            anl ADCCON0, #0xF0
04F2 43E804     281            orl ADCCON0, #0x04 ; Select channel 4
04F5 1203F1     282            lcall Read_ADC
04F8            283       
04F8            284       ; Convert to voltage
04F8 8830       285            mov x+0, R0
04FA 8931       286            mov x+1, R1
04FC            287            ; Pad other bits with zero
04FC 753200     288            mov x+2, #0
04FF 753300     289            mov x+3, #0
0502 7534FF     290            mov y+0, #low (40959 % 0x10000) 
0505 75359F     290            mov y+1, #high(40959 % 0x10000) 
0508 753600     290            mov y+2, #low (40959 / 0x10000) 
050B 753700     290            mov y+3, #high(40959 / 0x10000)  ; The MEASURED voltage reference: 4.0959V, with 4 decimal places
050E 120247     291            lcall mul32
0511            292            ; Retrive the ADC LM4040 value
0511 853D34     293            mov y+0, VAL_LM4040+0
0514 853E35     294            mov y+1, VAL_LM4040+1
0517            295            ; Pad other bits with zero
0517 753600     296            mov y+2, #0
051A 753700     297            mov y+3, #0
051D 1202D4     298            lcall div32
0520            299   
0520 753440     300            mov y+0, #low (1000000 % 0x10000) 
0523 753542     300            mov y+1, #high(1000000 % 0x10000) 
0526 75360F     300            mov y+2, #low (1000000 / 0x10000) 
0529 753700     300            mov y+3, #high(1000000 / 0x10000) 
052C 120247     301       lcall mul32
052F            302   
052F 7534F3     303            mov y+0, #low (243 % 0x10000) 
0532 753500     303            mov y+1, #high(243 % 0x10000) 
0535 753600     303            mov y+2, #low (243 / 0x10000) 
0538 753700     303            mov y+3, #high(243 / 0x10000) 
053B 1202D4     304       lcall div32
053E            305   
053E 753404     306            mov y+0, #low (4100 % 0x10000) 
0541 753510     306            mov y+1, #high(4100 % 0x10000) 
0544 753600     306            mov y+2, #low (4100 / 0x10000) 
0547 753700     306            mov y+3, #high(4100 / 0x10000) 
054A 1202D4     307       lcall div32
054D            308   
054D            309   
054D 854E34     310            mov y+0, StoreThermocouple+0
0550 854F35     311            mov y+1, StoreThermocouple+1
0553 855036     312            mov y+2, StoreThermocouple+2
0556 855137     313            mov y+3, StoreThermocouple+3
0559            314   
0559 120192     315            lcall add32
055C            316            
055C 85304E     317            mov StoreThermocouple+0, x+0
055F 85314F     318            mov StoreThermocouple+1, x+1
0562 853250     319            mov StoreThermocouple+2, x+2
0565 853351     320            mov StoreThermocouple+3, x+3
0568            321   
0568 AA49       322            mov R2, TimePerSample
056A 120397     323            lcall waitms
056D            324   
056D            325            ;Checks if enough measurements have been taken
056D            326            
056D 1545       327            dec MeasurementCounter+0
056F E545       328            mov a, MeasurementCounter+0
0571 B4FF02     329            cjne a, #0xFF, CheckHigh
0574 1546       330            dec MeasurementCounter+1
0576            331            CheckHigh:
0576 E545       332            mov a, MeasurementCounter+0
0578 4546       333            orl a, MeasurementCounter+1
057A 6003       334            jz DisplayValue
057C 020624     335            ljmp EndForever
057F            336            
057F            337            ;Divides stored measurements by number of measurements taken
057F            338   DisplayValue:    
057F 753400     339            mov y+0, #low (0 % 0x10000) 
0582 753500     339            mov y+1, #high(0 % 0x10000) 
0585 753600     339            mov y+2, #low (0 / 0x10000) 
0588 753700     339            mov y+3, #high(0 / 0x10000) 
058B            340            
058B 853F30     341            mov x+0, StoreMeasurements+0
058E 854031     342            mov x+1, StoreMeasurements+1
0591 854132     343            mov x+2, StoreMeasurements+2
0594 854233     344            mov x+3, StoreMeasurements+3
0597            345            
0597 E547       346            mov a, SamplesPerDisplay+0
0599 F534       347            mov y+0, a
059B F545       348            mov MeasurementCounter+0, a
059D            349   
059D E548       350            mov a, SamplesPerDisplay+1
059F F535       351            mov y+1, a
05A1 F546       352            mov MeasurementCounter+1, a     
05A3            353            
05A3 1202D4     354            lcall div32
05A6            355            
05A6            356            ;Load_y(100)
05A6            357            ;lcall mul32
05A6            358   
05A6 7534A4     359            mov y+0, #low (27300 % 0x10000) 
05A9 75356A     359            mov y+1, #high(27300 % 0x10000) 
05AC 753600     359            mov y+2, #low (27300 / 0x10000) 
05AF 753700     359            mov y+3, #high(27300 / 0x10000) 
05B2 1201B3     360            lcall sub32
05B5            361            
05B5 853052     362            mov FinalLM335+0, x+0 ;Stores final LM335 value in degrees C
05B8 853153     363            mov FinalLM335+1, x+1
05BB 853254     364            mov FinalLM335+2, x+2
05BE 853355     365            mov FinalLM335+3, x+3
05C1            366            
05C1            367            ;Does same as above, but for the thermocouple
05C1            368            
05C1 753400     369            mov y+0, #low (0 % 0x10000) 
05C4 753500     369            mov y+1, #high(0 % 0x10000) 
05C7 753600     369            mov y+2, #low (0 / 0x10000) 
05CA 753700     369            mov y+3, #high(0 / 0x10000) 
05CD            370            
05CD 854E30     371            mov x+0, StoreThermocouple+0
05D0 854F31     372            mov x+1, StoreThermocouple+1
05D3 855032     373            mov x+2, StoreThermocouple+2
05D6 855133     374            mov x+3, StoreThermocouple+3
05D9            375            
05D9 E547       376            mov a, SamplesPerDisplay+0
05DB F534       377            mov y+0, a
05DD F545       378            mov MeasurementCounter+0, a
05DF            379   
05DF E548       380            mov a, SamplesPerDisplay+1
05E1 F535       381            mov y+1, a
05E3 F546       382            mov MeasurementCounter+1, a     
05E5            383            
05E5 1202D4     384            lcall div32
05E8            385            
05E8            386            ;Load_y(100)
05E8            387            ;lcall mul32 ;Note that the final thermocouple value in degrees C is now stored in x
05E8            388            
05E8            389            ;Load_y(0)
05E8            390            ;mov y+0, FinalLM335+0
05E8            391            ;mov y+1, FinalLM335+1
05E8            392            ;mov y+2, FinalLM335+2
05E8            393            ;mov y+3, FinalLM335+3
05E8            394   
05E8 753498     395            mov y+0, #low (2200 % 0x10000) 
05EB 753508     395            mov y+1, #high(2200 % 0x10000) 
05EE 753600     395            mov y+2, #low (2200 / 0x10000) 
05F1 753700     395            mov y+3, #high(2200 / 0x10000) 
05F4            396   
05F4 120192     397            lcall add32 ; Puts the final temperature value into x
05F7            398            
05F7            399            
05F7            400            ; Convert to BCD and display
05F7 1200CD     401            lcall hex2bcd
05FA 12039D     402            lcall Display_formated_BCD
05FD            403   
05FD 12044F     404            lcall SendBCD
0600            405   
0600 753F00     406            mov StoreMeasurements+0, #0
0603 754000     407            mov StoreMeasurements+1, #0
0606 754100     408            mov StoreMeasurements+2, #0
0609 754200     409            mov StoreMeasurements+3, #0
060C            410            
060C 754E00     411            mov StoreThermocouple+0, #0
060F 754F00     412            mov StoreThermocouple+1, #0
0612 755000     413            mov StoreThermocouple+2, #0
0615 755100     414            mov StoreThermocouple+3, #0
0618            415            
0618 755200     416            mov FinalLM335+0, #0
061B 755301     417            mov FinalLM335+1, #1
061E 755402     418            mov FinalLM335+2, #2
0621 755503     419            mov FinalLM335+3, #3
0624            420   
0624            421   
0624            422   EndForever:
0624 753000     423            mov x+0, #0
0627 753100     424            mov x+1, #0
062A 753200     425            mov x+2, #0
062D 753300     426            mov x+3, #0
0630 020496     427            ljmp Forever
0633            428   
0633            429   END
